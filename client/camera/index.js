import * as alt from 'alt-client';
import * as native from 'natives';

let camera = null;
let currentPreset = 'full-body';
let targetPos = null;       // –¢–æ—á–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–º–µ—Ä–∞
let tickHandler = null;
let distance = 1.5;         // –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–ª–∏
let lerpSpeed = 0.1;        // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ ---
export function InitCamera() {
    const player = alt.Player.local;

    alt.toggleGameControls(false);
    alt.showCursor(true);

    // --- –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∏–≥—Ä–æ–∫–∞ ---
    native.setEntityHeading(player.scriptID, 180); // 180¬∞ - –∏–≥—Ä–æ–∫ –ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ
    native.setEntityRotation(player.scriptID, 0, 0, 180, 2, true);
    native.freezeEntityPosition(player.scriptID, true);


    camera = native.createCam("DEFAULT_SCRIPTED_CAMERA", true);
    native.setCamActive(camera, true);
    native.renderScriptCams(true, false, 0, true, false, 0);

    targetPos = player.pos;

    setCameraPreset(currentPreset);

    tickHandler = alt.everyTick(updateCamera);

    alt.log('üé• Camera initialized');
}

// --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Å–µ—Ç –∫–∞–º–µ—Ä—ã ---
export function setCameraPreset(preset) {
    currentPreset = preset;
    const player = alt.Player.local;
    const pos = player.pos;

    switch (preset) {
        case 'side':
            distance = 1.5;
            targetPos = { x: pos.x, y: pos.y, z: pos.z + 0.2 };
            break;
        case 'face':
            distance = 0.6;
            targetPos = { x: pos.x, y: pos.y, z: pos.z  + 0.6 };
            break;
        case 'full-body':
            distance = 1.2;
            targetPos = { x: pos.x, y: pos.y, z: pos.z + 0.3 };
            break;
    }
}

// --- –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ ---
export function focusOnLimb(pos) {
    // pos = –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, –∫—É–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–º–µ—Ä–∞
    targetPos = pos;
}

// --- Zoom –∫–∞–º–µ—Ä—ã ---
export function zoomCamera(delta) {
    distance = Math.max(0.3, Math.min(3, distance - delta));
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
function getCameraOffset() {
    const player = alt.Player.local;
    const pos = player.pos;

    switch (currentPreset) {
        case 'side':
            // –ö–∞–º–µ—Ä–∞ —Å–∑–∞–¥–∏ –∏–≥—Ä–æ–∫–∞ –∏ —á—É—Ç—å –≤—ã—à–µ, —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä —Ç–µ–ª–∞
            return {
                x: pos.x - distance,  
                y: pos.y,             
                z: pos.z + 0.5        
            };
        case 'face':
            // –ö–∞–º–µ—Ä–∞ —Å–ø–µ—Ä–µ–¥–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ª–∏—Ü–∞
            return {
                x: pos.x,  
                y: pos.y - distance,
                z: pos.z + 0.65
            };
        case 'full-body':
            // –ö–∞–º–µ—Ä–∞ —Å–±–æ–∫—É
            return {
                x: pos.x,
                y: pos.y - distance, // —Å–±–æ–∫—É
                z: pos.z + 0.5
            };
        default:
            return {
                x: pos.x - distance,
                y: pos.y,
                z: pos.z + 1
            };
    }
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫–∞–∂–¥—ã–π —Ç–∏–∫ ---
function updateCamera() {
    if (!camera) return;
    const player = alt.Player.local;

    // –ö–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ targetPos
    const focus = targetPos || {
        x: player.pos.x,
        y: player.pos.y,
        z: player.pos.z + 0.9
    };

    const camCoord = native.getCamCoord(camera);
    const offset = getCameraOffset();

    const newX = camCoord.x + (offset.x - camCoord.x) * lerpSpeed;
    const newY = camCoord.y + (offset.y - camCoord.y) * lerpSpeed;
    const newZ = camCoord.z + (offset.z - camCoord.z) * lerpSpeed;

    native.setCamCoord(camera, newX, newY, newZ);

    native.pointCamAtCoord(camera, focus.x, focus.y, focus.z);
}

// --- –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã ---
export function DestroyCamera() {
    if (!camera) return;

    native.renderScriptCams(false, false, 0, true, false, 0);
    native.destroyCam(camera, false);
    camera = null;

    if (tickHandler) {
        alt.clearEveryTick(tickHandler);
        tickHandler = null;
    }

    // --- –†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –∏–≥—Ä–æ–∫–∞ ---
    native.freezeEntityPosition(alt.Player.local.scriptID, false);

    alt.toggleGameControls(true);
    alt.showCursor(false);
}
