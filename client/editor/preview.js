import * as alt from 'alt-client';
import * as native from 'natives';

let previewPed = null;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
 */
export async function loadModel(modelName) {
    const hash = native.getHashKey(modelName); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥

    if (!native.isModelInCdimage(hash) || !native.isModelValid(hash)) {
        alt.logError(`‚ùå –ú–æ–¥–µ–ª—å ${modelName} (${hash}) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
        return null;
    }

    native.requestModel(hash);

    let attempts = 0;
    while (!native.hasModelLoaded(hash)) {
        await new Promise(res => alt.setTimeout(res, 50));
        attempts++;
        if (attempts > 100) {
            alt.logError(`‚è± –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å ${modelName} (${hash})`);
            return null;
        }
    }

    alt.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    return hash;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç previewPed –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
export async function spawnPreviewPed(modelName) {
    const player = alt.Player.local;
    if (!player?.valid || !player.scriptID) {
        alt.logError('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤');
        return null;
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ freemode –º–æ–¥–µ–ª–µ–π (–≤–∞–∂–Ω–æ!)
    await loadModel('mp_m_freemode_01');
    await loadModel('mp_f_freemode_01');

    const modelHash = await loadModel(modelName);
    if (!modelHash) return null;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ–¥–∞
    if (previewPed && native.doesEntityExist(previewPed)) {
        native.deletePed(previewPed);
        previewPed = null;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
    native.setEntityVisible(player.scriptID, false, false);

    const pos = player.pos;
    previewPed = native.createPed(2, modelHash, pos.x, pos.y, pos.z, 180.0, false, true);

    if (!native.doesEntityExist(previewPed)) {
        alt.logError(`‚ùå PreviewPed –Ω–µ –ø–æ—è–≤–∏–ª—Å—è (${modelName})`);
        return null;
    }

    //native.setPedDefaultComponentVariation(previewPed); // –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –Ω–æ –ª—É—á—à–µ –ø–æ—Å–ª–µ
    native.setEntityInvincible(previewPed, true);
    native.freezeEntityPosition(previewPed, true);
    native.taskStandStill(previewPed, -1);

    native.setModelAsNoLongerNeeded(modelHash);

    alt.log(`‚úÖ PreviewPed —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (${modelName}) —Å –æ–¥–Ω–∏–º–∏ —à—Ç–∞–Ω–∞–º–∏`);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ previewPed
 */
export function getPreviewPed() {
    return previewPed;
}

/**
 * –£–¥–∞–ª—è–µ—Ç previewPed –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
 */
export function destroyPreviewPed() {
    const player = alt.Player.local;

    if (previewPed && native.doesEntityExist(previewPed)) {
        native.deletePed(previewPed);
        previewPed = null;
        alt.log('üóëÔ∏è PreviewPed —É–¥–∞–ª—ë–Ω');
    }

    native.setEntityVisible(player.scriptID, true, false);
}